/**
 * This script generates and exports to Google Drive a raster of landform varieties at a scale of ~ 90 m for Brazil.  

- Steps to calculate landform variety

1- Calculate relief slopes, aspects and Topographic Position Index (TPI) from a Digital Elevation Model.

2- Calculate a moisture index from a flow accumulation raster and slopes.

3- Transform slopes, aspect, TPI and moisture index into classes

4- Combine slopes, aspect, TPI and moisture classes into a code string

5- Re-classify landform string into landform types

6- Count the number of distinct landforms within a focal cell kernel (landform variety)

7- Export landform variety raster

*/

/**
 * Function to calculate Topographic Position Index (TPI) within a circle kernel of a specific size. 
 * @param Kernel size in pixel units.
 * @results An image of TPI values.
*/

var calculate_TPI = function(pixel_size){
  
// Split neighborhood cells within a circles kernel into bands

var focal_mean = DEM.focalMean({
                       radius: pixel_size,
                       kernelType: "circle",
                       units: "pixels"
                     });

// Calculate differences of the focal cell to the average neighborhood. 
//It gives the same result as the average of differences as in the above equation 

TPI = focal_mean.subtract(DEM)

return TPI;
}


/*
First, we import a shapefile of brazilian biomes from IBGE (2018) and filter a biome to mask the rasters.
*/
// It is required to use bioma bounds instead the whole polygons because the feature complexity 
// inhibits the image exportation.

var bioma = ee.FeatureCollection("projects/ee-lucasljardim9/assets/Biome")
                        .map(function(feature){
                             return feature.bounds()
                             })
                        .geometry()
                        .dissolve({'maxError': 1})
                        .bounds();
                        
                       
                       
/*
Then, we import a Digital Elevation Model from Merit-DEM (...) at a scale of ~ 90 meters. 
This raster solves problems of elevation estimates in flat regions and places with high density of wetlands.
*/

var DEM = ee.Image("MERIT/DEM/v1_0_3");

/*
Also, we import Merit-Hydro raster (..), which has a layer of flow accumulation derived from the above cited 
Merit-DEM. This raster avoids issues related to calculate flow accumulation from flat areas. Additionally, 
this raster avoids a concern about calculating flow direction and flow accumulation for biomes without 
taking into account the whole basin flow.
*/

var flow_accumulation = ee.Image("MERIT/Hydro/v1_0_1")
    .select("upg")
    

var water = ee.Image("projects/ee-lucasljardim9/assets/brasil_coverage_2021")
            .reproject('EPSG:4326', null, 92.76624);
water = water
        .where(water.eq(33), 1)
        .where(water.neq(33), 0);


/* 
We calculate relief slopes and aspect based on the DEM. 
*/

var slope = ee.Terrain.slope(DEM);

var aspect = ee.Terrain.aspect(DEM);

/*
Here we calculate a moisture index (..) based on the flow accumulation and slopes.
A focal mean is calculated around the cells to smooth the index. The focal mean 
is calculated around a neighborhood of 3 cells within a circle kernel.

Moisture index = log((flow_accumulation + 1) / (slope + 1)) * 1000
*/

var moisture_index = flow_accumulation.
                     add(ee.Number(1))
                     .divide(slope.add(ee.Number(1)))
                     .log()
                     .multiply(1000)
                     .focalMean({
                       radius: 1, // the window is inversely proportional to the scale
                       kernelType: "circle",
                       units: "pixels"
                     });
                     
/* Here we calculate a Topographic Position Index (TPI) (..). We create a function to calculate TPI 
for a circular kernels of different sizes. Then, we took the average TPI to compose an index 
that considers the landscape influence at multiple scales (Theobald..).

TPI = sum(elevation_neighborhood -  focal_elevation) / number of neighborhood cells

We define the neighborhood by a circular kernel. 

The original TNC script used an annulus (torus) kernel to calculate the Land Position Index (LPI). It was required 
to weight elevation differences by their geographical distances.

LPI = sum((elevation_neighborhood -  focal_elevation) / cell distance) / number of neighborhood cells

Annulus kernel is not implemented yet on GEE, we may implement, if it is necessary, a function to calculate it in the future to calculate LPI.
*/

/*
We need to define window sizes to calculate the average TPI. First, we
defined a scale 
we looked for window sizes that captured regional morphologies 
such as plateaus, mountains. We tried values ranging from 1 to 15 cells
and selected 7 as the optimal window capture high elevation elements (e.g. peaks and plateaus). Then, we chose
values to capture finer features as hilltop and mountain peaks (1 and 5 cells). Then, we included
intermediary values (10, 30) to smooth local values. We need to smooth values as they 
enhance local variation, classifying peaks in plain areas. 
*/

//var window_size = [1, 5, 10, 30, 50]; //13 zoom level scale// window sizes

var window_size = [1, 5, 7]; //90 meters scale window sizes

var TPI = ee.ImageCollection(window_size.map(calculate_TPI))
          .toBands()
          .reduce("mean");
          
// Reclassifying indexes into classes
/*
Here, by try and error, we classified slope, aspect, TPI and moisture indexes into classes
that will represent the landforms. We maintained slopes classes, and tuned TPI by looking 
a terrain map in GEE and identifying values that better represented the landforms.
For instance, values of TPI and slope that better classified Summits and
Slope Crests. Then, values that classified Steep Slopes, Side Slopes
and Footslopes properly. We tuned values to split Side Slopes and Hilltops. 
So, we tuned values to identify Valleys and Dry flats. Unfortunatly, flat areas in plateaus 
are classified as dry flats and valley, maybe a elevation criteria must be included 
to separate flat lowlands from flat highlands.  
To classify wet areas we tuned moisture index to capture rivers.
*/

var slope_classes = slope
      .where(slope.gte(-1).and(slope.lte(2)), 1)
      .where(slope.gt(2).and(slope.lte(6)), 2)
      .where(slope.gt(6).and(slope.lte(24)), 3)
      .where(slope.gt(24).and(slope.lte(35)), 4)
      .where(slope.gt(35).and(slope.lte(90)), 5);
     
// It seems Earth engine does not calculate -1 values for flat areas as ArcGis does
// Aspect values were classified as north (1) and south (2) faces.
//Values between 90 and 270 are cool areas in south hemisphere.
//The other values are warm areas.  
var aspect_classes = aspect
      .where(aspect.gte(0).and(aspect.lte(90)), 2) // warm
      .where(aspect.gt(90).and(aspect.lte(270)), 1) // cool
      .where(aspect.gt(270).and(aspect.lte(360)), 2); // warm
      

// We tuned TPI by try and error
var TPI_classes = TPI
      .where(TPI.lte(-15), 1) // summits
      .where(TPI.gt(-15).and(TPI.lt(-1)), 2) // Hilltops and Sideslopes
      .where(TPI.gte(-1).and(TPI.lte(6)), 3) //Valleys and Toeslopes
      .where(TPI.gt(6).and(TPI.lte(975)), 4) // Footslopes
      .where(TPI.gt(975), 5); // Flat at the bottom steep slope

// We defined the moisture values creating a mask of moisture raster. We chose values 
// capturing rivers

var moisture_classes = moisture_index
      .where(moisture_index.lte(3000), 0) //1200
      .where(moisture_index.gt(3000), 1); // moist areas

moisture_classes = moisture_classes.add(water);
moisture_classes = moisture_classes
                   .where(moisture_classes.gte(1), 1)
                   .where(moisture_classes.lt(1), 0)

// Combining classes into a string descriptor of landform types

var classes_collection = ee.Image([moisture_classes.multiply(ee.Number(1000)), 
                                   aspect_classes.multiply(ee.Number(100)), 
                                   TPI_classes.multiply(ee.Number(10)), 
                                   slope_classes]);

var landform_combination = classes_collection.reduce(ee.Reducer.sum());

// Re-classifying strings into landform types

var landform_types = landform_combination
                      .mask(landform_combination.gt(0)) // clean null values
                      .where(landform_combination.eq(11), 11)
                      .where(landform_combination.eq(12), 11)
                      .where(landform_combination.eq(13), 13)
                      .where(landform_combination.eq(14), 11)
                      .where(landform_combination.eq(15), 5)
                      .where(landform_combination.eq(20), 21)
                      .where(landform_combination.eq(21), 21)
                      .where(landform_combination.eq(22), 22)
                      .where(landform_combination.eq(23), 24)
                      .where(landform_combination.eq(24), 24)
                      .where(landform_combination.eq(25), 5)
                      .where(landform_combination.eq(31), 30)
                      .where(landform_combination.eq(32), 32)
                      .where(landform_combination.eq(33), 24)
                      .where(landform_combination.eq(34), 24)
                      .where(landform_combination.eq(35), 5)
                      .where(landform_combination.eq(40), 32)
                      .where(landform_combination.eq(41), 32)
                      .where(landform_combination.eq(42), 32)
                      .where(landform_combination.eq(43), 43)
                      .where(landform_combination.eq(44), 3)
                      .where(landform_combination.eq(45), 5)
                      .where(landform_combination.eq(51), 51)
                      .where(landform_combination.eq(111), 11)
                      .where(landform_combination.eq(112), 11)
                      .where(landform_combination.eq(113), 13)
                      .where(landform_combination.eq(114), 3)
                      .where(landform_combination.eq(115), 5)
                      .where(landform_combination.eq(121), 21)
                      .where(landform_combination.eq(122), 22)
                      .where(landform_combination.eq(123), 23)
                      .where(landform_combination.eq(124), 3)
                      .where(landform_combination.eq(125), 5)
                      .where(landform_combination.eq(131), 30)
                      .where(landform_combination.eq(132), 32)
                      .where(landform_combination.eq(133), 23)
                      .where(landform_combination.eq(134), 3)
                      .where(landform_combination.eq(135), 5)
                      .where(landform_combination.eq(141), 32)
                      .where(landform_combination.eq(142), 32)
                      .where(landform_combination.eq(143), 43)
                      .where(landform_combination.eq(144), 3)
                      .where(landform_combination.eq(145), 5)
                      .where(landform_combination.eq(151), 51)
                      .where(landform_combination.eq(211), 11)
                      .where(landform_combination.eq(212), 11)
                      .where(landform_combination.eq(213), 13)
                      .where(landform_combination.eq(214), 4)
                      .where(landform_combination.eq(215), 5)
                      .where(landform_combination.eq(221), 21)
                      .where(landform_combination.eq(222), 22)
                      .where(landform_combination.eq(223), 24)
                      .where(landform_combination.eq(224), 4)
                      .where(landform_combination.eq(225), 5)
                      .where(landform_combination.eq(231), 30)
                      .where(landform_combination.eq(232), 32)
                      .where(landform_combination.eq(233), 24)
                      .where(landform_combination.eq(234), 4)
                      .where(landform_combination.eq(235), 5)
                      .where(landform_combination.eq(241), 32)
                      .where(landform_combination.eq(242), 32)
                      .where(landform_combination.eq(243), 44)
                      .where(landform_combination.eq(244), 4)
                      .where(landform_combination.eq(245), 5)
                      .where(landform_combination.eq(251), 51)
                      .where(landform_combination.gte(1000), 39);
                      
/*
Calculating landform richness within a circular kernel
The circle radius was defined by the TNC area, calculating 100 acre backwards to squared meters, than meters.

r = (A/pi)^1/2

100 acre equal to 404686 squared meters

r = (404686/3.14)^1/2
*/

var r = ee.Number(404686).divide(ee.Number(Math.PI)).sqrt() // radius in meters

var image_resolution = DEM.projection().nominalScale()

var radius_pixels = r.divide(ee.Number(image_resolution)).round() // 4 cells

var landform_variety = landform_types.neighborhoodToBands(ee.Kernel.circle(radius_pixels)).reduce(ee.Reducer.countDistinct())

// Visualization

var sld_intervals =
'<RasterSymbolizer>' +
  '<ColorMap type="intervals" extended="false">' +
    '<ColorMapEntry color="#ffc408" quantity="3" label="Cool Steep Slope"/>' +
    '<ColorMapEntry color="#ffa101" quantity="4" label="Warm Steep Slope"/>' +
    '<ColorMapEntry color="#ef595a" quantity="5" label="Cliff"/>' +
    '<ColorMapEntry color="#ffbdbe" quantity="11" label="Summit/Ridgetop"/>' +
    '<ColorMapEntry color="#6e4100" quantity="13" label="Slope Crest"/>' +
    '<ColorMapEntry color="#af7b53" quantity="21" label="Flat Hilltop"/>' +
    '<ColorMapEntry color="#c8c284" quantity="22" label="Gentle Slope Hilltop"/>' +
    '<ColorMapEntry color="#c8f6ad" quantity="23" label="Cool Sideslope"/>' +
    '<ColorMapEntry color="#83e763" quantity="24" label="Warm Sideslope"/>' +
    '<ColorMapEntry color="#ffffbe" quantity="30" label="Dry Flats"/>' +
    '<ColorMapEntry color="#a9a800" quantity="32" label="Valley/Toeslope"/>' +
    '<ColorMapEntry color="#b671f2" quantity="39" label="Moist Flats"/>' +
    '<ColorMapEntry color="#08a702" quantity="43" label="Cool Footslope/Cove"/>' +
    '<ColorMapEntry color="#0a7000" quantity="44" label="Warm Footslope/Cove"/>' +
  '</ColorMap>' +
'</RasterSymbolizer>';


Map.setCenter(-48.3375, -14.0182, 11)

Map.addLayer(landform_types.reproject('EPSG:4326', null, 92.76624).sldStyle(sld_intervals), {});

Map.addLayer(landform_types.reproject('EPSG:4326', null, 92.76624))

//Map.addLayer(water, {min: 0, max: 1}, 'water')

/* Print plot scale*/
print(Map.getScale())

//Map.addLayer(landform_types)

var legend = ui.Panel({
             style: {
               position:'bottom-right',
               padding: '8px 10px'
             }
});

var makeRow = function(color, name) {
 
      // Create the label that is actually the colored box.
      var colorBox = ui.Label({
        style: {
          backgroundColor: color,
          // Use padding to give the box height and width.
          padding: '8px',
          margin: '0 0 4px 0'
        }
      });
 
      // Create the label filled with the description text.
      var description = ui.Label({
        value: name,
        style: {margin: '0 0 4px 6px'}
      });
 
      // return the panel
      return ui.Panel({
        widgets: [colorBox, description],
        layout: ui.Panel.Layout.Flow('horizontal')
      });
};

var palette = [
"#ffc408",
"#ffa101",
"#ef595a",
"#ffbdbe",
"#6e4100",
"#af7b53",
"#c8c284", 
"#c8f6ad",
"#83e763",
"#ffffbe",
"#a9a800",
"#b671f2",
"#08a702",
"#0a7000"
];

var land =[
"3-Cool Steep Slope",
"4-Warm Steep Slope",
"5-Cliff",
"11-Summit/Ridgetop",
"13-Slope Crest",
"21-Flat Hilltop",
"22-Gentle Slope Hilltop",
"23-Cool Sideslope",
"24-Warm Sideslope",
"30-Dry Flats",
"32-Valley/Toeslope",
"39-Moist Flats",
"43-Cool Footslope/Cove",
"44-Warm Footslope/Cove"
];

for (var i = 0; i < 14; i++) {
  legend.add(makeRow(palette[i], land[i]));
  }  
 
Map.add(legend);

/*Exporting images
*/

// Exporting landform varieties
var landform_variety_clip = landform_variety.clip(bioma)
Export.image.toAsset({
  image: landform_variety_clip,
  description: 'landform_variety_clip',
  scale: 92.76624,
  region: bioma,
  //folder: "GEE",
  maxPixels: 5072319225 
});


//Exporting landform types
var landform_types_clip = landform_types.clip(bioma)
Export.image.toAsset({
  image: landform_types_clip,
  description: 'landform_types_clip',
  scale: 92.76624,
  region: bioma,
  //folder: "GEE",
  maxPixels: 5072319225
});

/*
Export.image.toAsset({
  image: landform_types,
  description: 'Brazil_landform_types',
  assetId: "projects/ee-lucasljardim9/assets/landform_types",
  pyramidingPolicy: "mode", 
  scale: 92.76624,
  region: bioma,
  maxPixels: 5072319225
});
*/

/*
var DEM_clip = DEM.clip(bioma)
//Export base variables for validation!
Export.image.toDrive({
  image: DEM_clip,
  description: 'DEM_clip',
  scale: 92.76624,
  region: bioma,
  folder: "GEE",
  maxPixels: 5072319225
});
var flow_clip = flow_accumulation.clip(bioma)
Export.image.toDrive({
  image: flow_clip,
  description: 'flow_acc_clip',
  scale: 92.76624,
  region: bioma,
  folder: "GEE",
  maxPixels: 5072319225
});
var slope_clip = slope.clip(bioma)
Export.image.toDrive({
  image: slope_clip,
  description: 'slope_clip',
  scale: 92.76624,
  region: bioma,
  folder: "GEE",
  maxPixels: 5072319225
});
var asp_clip = aspect.clip(bioma)
Export.image.toDrive({
  image: asp_clip,
  description: 'aspect_clip',
  scale: 92.76624,
  region: bioma,
  folder: "GEE",
  maxPixels: 5072319225
});
var moist_clip = moisture_index.clip(bioma)
Export.image.toDrive({
  image: moisture_index,
  description: 'moisture_index_clip',
  scale: 92.76624,
  region: bioma,
  folder: "GEE",
  maxPixels: 5072319225
});
var moist_class_clip = moisture_classes.clip(bioma)
Export.image.toDrive({
  image: moist_class_clip,
  description: 'moisture_classes_clip',
  scale: 92.76624,
  region: bioma,
  folder: "GEE",
  maxPixels: 5072319225
});
var water_clip = water.clip(bioma)
Export.image.toDrive({
  image: water_clip,
  description: 'water_clip',
  scale: 92.76624,
  region: bioma,
  folder: "GEE",
  maxPixels: 5072319225
});
var TPI_clip = TPI.clip(bioma)
Export.image.toDrive({
  image: TPI_clip,
  description: 'TPI_clip',
  scale: 92.76624,
  region: bioma,
  folder: "GEE",
  maxPixels: 5072319225
});
*/

var variables = ee.Image.cat(
  [
    landform_types,
    landform_variety,
    DEM,
    slope,
    aspect,
    water,
    TPI,
    flow_accumulation,
    moisture_index,
    moisture_classes
    ]).rename(
      [
        "landform_types",
        "landform_variety",
        "DEM",
        "slope",
        "aspect",
        "water",
        "TPI",
        "flow_acc",
        "moisture_index",
        "moisture_classes"]);
var clipped_vars = variables.clip(bioma)                
var points = clipped_vars.sample({region: bioma, 
                       scale: 92.76624232772798, 
                       numPixels:10000
                       });
Export.table.toDrive({
  collection: points,
  description: "extract_data",
  folder: "GEE"
  })

